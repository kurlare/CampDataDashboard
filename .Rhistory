rsdplot <- ggplot(mtcars, x = mtcars$mpg, y = resid(lm(fit1)))
rsdplot + geom_point(size = 7, colour = "black", alpha = 0.4)
rsdplot <- ggplot(mtcars, aes(x = mtcars$mpg, y = resid(lm(fit1))))
rsdplot + geom_point(size = 7, colour = "black", alpha = 0.4)
rsdplot + geom_point(size = 7, colour = "black", alpha = 0.4)
+ geom_hline(yintercept = 0, size =2)
rsdplot <- ggplot(data.frame(x = mtcars$mpg, y = resid(lm(fit1)))) +
geom_point(size = 7, colour = "black", alpha = 0.4) +
geom_hline(yintercept = 0, size =2)
rsdplot
rsdplot <- ggplot(mtcars, aes(x = mtcars$mpg, y = resid(lm(fit1)))) +
geom_point(size = 7, colour = "black", alpha = 0.4) +
geom_hline(yintercept = 0, size =2)
rsdplot
rsdplot <- ggplot(mtcars, aes(x = mtcars$mpg, y = resid(lm(fit1)))) +
geom_point(size = 7, colour = "black", alpha = 0.4) +
geom_point(size = 5, colour = "red", alpha = 0.8) +\
geom_hline(yintercept = 0, size =2)
rsdplot <- ggplot(mtcars, aes(x = mtcars$mpg, y = resid(lm(fit1)))) +
geom_point(size = 7, colour = "black", alpha = 0.4) +
geom_point(size = 5, colour = "red", alpha = 0.8) +
geom_hline(yintercept = 0, size =2)
rsdplot
rsdplot <- ggplot(mtcars, aes(x = mtcars$mpg, y = resid(lm(fit1)))) +
geom_point(size = 7, colour = "black", alpha = 0.4) +
geom_point(size = 5, colour = "red", alpha = 0.6) +
geom_hline(yintercept = 0, size =2)
rsdplot
rsdplot <- ggplot(mtcars, aes(x = mtcars$mpg, y = resid(lm(fit1)))) +
geom_point(size = 7, colour = "black", alpha = 0.4) +
geom_point(size = 5, colour = "red", alpha = 0.2) +
geom_hline(yintercept = 0, size =2)
rsdplot
rsdplot <- ggplot(mtcars, aes(x = mtcars$mpg, y = resid(lm(fit1)))) +
geom_point(size = 7, colour = "black", alpha = 0.4) +
geom_point(size = 5, colour = "red", alpha = 0.3) +
geom_hline(yintercept = 0, size =2)
rsdplot
rsdplot <- ggplot(mtcars, aes(x = mtcars$mpg, y = resid(lm(fit1)))) +
geom_point(size = 7, colour = "black", alpha = 0.4) +
geom_point(size = 5, colour = "red", alpha = 0.4) +
geom_hline(yintercept = 0, size =2)
rsdplot
hatvalues(fit)
hatvalues(fit1)
list(hatvalues(fit1))
as.numeric(hatvalues(fit1))
plot(as.numeric(hatvalues(fit1)))
plot(as.numeric(hatvalues(fit1)), xlab = "Car Model (1-32)", ylab = "Hat Values")
plot(as.numeric(hatvalues(fit1)), xlab = "Car Model (1-32)", ylab = "Hat Values", col = "black")
plot(as.numeric(hatvalues(fit1)), xlab = "Car Model (1-32)", ylab = "Hat Values", pch = 2)
plot(as.numeric(hatvalues(fit1)), xlab = "Car Model (1-32)", ylab = "Hat Values", pch = 4)
plot(as.numeric(hatvalues(fit1)), xlab = "Car Model (1-32)", ylab = "Hat Values", pch = 1)
plot(as.numeric(hatvalues(fit1)), xlab = "Car Model (1-32)", ylab = "Hat Values", pch = 21)
plot(as.numeric(hatvalues(fit1)), xlab = "Car Model (1-32)", ylab = "Hat Values", pch = 20)
summary(fit1)$coefficients
summary(fit2)$coefficients
fit1 <- lm(mpg ~ am + wt + cyl, mtcars)  ## First model, including cylinders.
fit2 <- lm(mpg ~ am + wt, mtcars) ## Second model, without cylinders.
summary(fit2)$coefficients
summary(fit1)
summary(fit2)
model1 <- lm(mpg ~ am + wt + cyl, mtcars)  ## First model, including cylinders.
model2 <- lm(mpg ~ am + wt, mtcars) ## Second model, without cylinders.
summary(model1)$coefficients  ## Coefficients
summary(model2)$coefficients  ## Coefficients
summary(model1)
summary(model2)
sumCoef <- summary(model1)$coefficients
sumCoef[2,1] + c(1, -1) * 1.96(sumCoef[2,2])
sumCoef <- summary(model1)$coefficients
sumCoef[2,1] + c(1, -1) * 1.96(sumCoef[2,2])
sumCoef
sumCoef[2,1] + c(1, -1) * 1.96(sumCoef[2,2])
sumCoef[2,1] + c(1, -1) * 1.96 *sumCoef[2,2]
sumCoef[2,1] + c(1, -1) * (1.96 *sumCoef[2,2])
sumCoef[2,1] + (1.96 *sumCoef[2,2])
sumCoef[2,1] + (2 *sumCoef[2,2])
model1 <- lm(mpg ~ am + wt + cyl, mtcars)  ## First model, including cylinders.
model2 <- lm(mpg ~ am + wt, mtcars) ## Second model, without cylinders.
summary(model1)$coefficients
summary(model2)$coefficients
grp_by_cyl <- qplot(wt, mpg, mtcars)) + geom_smooth(aes(group=cyl), method="lm")
grp_by_cyl <- qplot(wt, mpg, mtcars) + geom_smooth(aes(group=cyl), method="lm")
grp_by_cyl
grp_by_cyl <- qplot(mtcars$wt, mtcars$mpg, mtcars) + geom_smooth(aes(group=cyl), method="lm")
grp_by_cyl
grp_by_cyl <- qplot(mtcars$wt, mtcars$mpg, mtcars) + geom_smooth(aes(group=mtcars$cyl), method="lm")
grp_by_cyl
grp_by_cyl <- ggplot(mtcars, aes(x = "wt", y = "mpg")xlab = "Weight 1000/lb", ylab = "MPG")
+ geom_smooth(aes(group=mtcars$cyl), method="lm")
+ ggtitle("Modeling MPG by weight, grouped by cylinder")
grp_by_cyl
grp_by_cyl <- ggplot(mtcars, aes(x = "wt", y = "mpg"), xlab = "Weight 1000/lb", ylab = "MPG")
+ geom_smooth(aes(group=mtcars$cyl), method="lm")
+ ggtitle("Modeling MPG by weight, grouped by cylinder")
grp_by_cyl <- ggplot(mtcars, aes(x = wt, y = mpg), xlab = "Weight 1000/lb", ylab = "MPG")
+ geom_smooth(aes(group=mtcars$cyl), method="lm")
+ ggtitle("Modeling MPG by weight, grouped by cylinder")
grp_by_cyl
e = c(resid(lm(mpg ~ 1, data = mtcars)),
resid(lm(mpg ~ wt, data = mtcars)),
resid(lm(mpg ~ wt + cyl, data = mtcars)))
fit = factor(c(rep("Itc", nrow(mtcars)),
rep("Itc, slope", nrow(mtcars))))
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 2, stackdir = "center", binwidth = 20)
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
e = c(resid(lm(mpg ~ 1, data = mtcars)),
resid(lm(mpg ~ wt, data = mtcars)),
resid(lm(mpg ~ wt + cyl, data = mtcars)))
e
e = c(resid(lm(mpg ~ 1, data = mtcars)),
resid(lm(mpg ~ wt, data = mtcars)),
)
fit = factor(c(rep("Itc", nrow(mtcars)),
rep("Itc, slope", nrow(mtcars))))
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 2, stackdir = "center", binwidth = 20)
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
e = c(resid(lm(mpg ~ 1, data = mtcars)),
resid(lm(mpg ~ wt, data = mtcars)))
fit = factor(c(rep("Itc", nrow(mtcars)),
rep("Itc, slope", nrow(mtcars))))
fit
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g
g = g + geom_dotplot(binaxis = "y", size = 2, stackdir = "center", binwidth = 20)
g
g = g + geom_dotplot(binaxis = "y", size = 1, stackdir = "center", binwidth = 15)
g
g = g + geom_dotplot(binaxis = "y", size = 0.25, stackdir = "center", binwidth = 15)
g
g = g + geom_dotplot(binaxis = "y", size = 0.25, stackdir = "center", binwidth = 10)
g
g = g + geom_dotplot(binaxis = "y", size = 0.25, stackdir = "center")
g
g = g + xlab("Fitting approach")
g
g = g + geom_dotplot( size = 0.25, stackdir = "center")
g = g + geom_dotplot( size = 0.25, stackdir = "center")
g
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot( size = 1, stackdir = "center")
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot( size = 2, stackdir = "center")
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot( size = 2, stackdir = "center", binwidth = 20)
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot( size = 2, stackdir = "center", binwidth = 2)
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot( size = 2, stackdir = "center", binwidth = 0.125)
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(size = 2, stackdir = "center", binwidth = 0.25)
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
str(e)
dim(e)
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 2, stackdir = "center", binwidth = 0.25)
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 4, stackdir = "center", binwidth = 0.25)
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
g
e = c(resid(lm(mpg ~ 1, data = mtcars)),
resid(lm(mpg ~ wt, data = mtcars)))
fit = factor(c(rep("Itc", nrow(mtcars)),
rep("Itc, slope", nrow(mtcars))))
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 4, stackdir = "center", binwidth = 0.5)
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
e = c(resid(lm(mpg ~ 1, data = mtcars)),
resid(lm(mpg ~ wt, data = mtcars)))
fit = factor(c(rep("mpg Variation", nrow(mtcars)),
rep("mpg ~ wt Variation ", nrow(mtcars))))
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 4, stackdir = "center", binwidth = 0.5)
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
e = c(resid(lm(mpg ~ 1, data = mtcars)),
resid(lm(mpg ~ wt, data = mtcars)),
resid(lm(mpg ~ wt + cyl, data = mtcars)))
fit = factor(c(rep("mpg Variation", nrow(mtcars)),
rep("Model 2 Variation", nrow(mtcars))),
rep("Model 1 Variation", nrow(mtcars)))
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 4, stackdir = "center", binwidth = 0.5)
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
e = c(resid(lm(mpg ~ 1, data = mtcars)),
resid(lm(mpg ~ wt + cyl, data = mtcars)))
fit = factor(c(rep("mpg Variation", nrow(mtcars)),
rep("Model 1 ", nrow(mtcars))))
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 4, stackdir = "center", binwidth = 0.5)
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
e = c(resid(lm(mpg ~ 1, data = mtcars)),
resid(lm(mpg ~ wt + cyl, data = mtcars)))
fit = factor(c(rep("mpg Variation", nrow(mtcars)),
rep("Model 1 ", nrow(mtcars))))
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 6, stackdir = "center", binwidth = 0.5)
g = g + xlab("Fitting approach")
g = g + ylab("Residuals")
g
e = c(resid(lm(mpg ~ 1, data = mtcars)),
resid(lm(mpg ~ wt + cyl, data = mtcars)))
fit = factor(c(rep("mpg ~ 1", nrow(mtcars)),
rep("Model 1 (mpg ~ wt + cyl) ", nrow(mtcars))))
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 6, stackdir = "center", binwidth = 0.5)
g = g + labs(title = "Variation Explained, Model 1", x = "Model", y = "Residuals")
g
e = c(resid(lm(mpg ~ 1, data = mtcars)),
resid(lm(mpg ~ wt + cyl, data = mtcars)))
fit = factor(c(rep("mpg ~ 1", nrow(mtcars)),
rep("Model 1", nrow(mtcars))))
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 6, stackdir = "center", binwidth = 0.5)
g = g + labs(title = "Variation Explained, Model 1", x = "Model", y = "Residuals")
g
e = c(resid(lm(mpg ~ 1, data = mtcars)),
resid(lm(mpg ~ wt + cyl, data = mtcars)))
fit = factor(c(rep("mpg ~ 1", nrow(mtcars)),
rep("Model 1", nrow(mtcars))))
mod1_var_plot <- ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
+ geom_dotplot(binaxis = "y", size = 6, stackdir = "center", binwidth = 0.5)
+ labs(title = "Variation Explained, Model 1", x = "Model", y = "Residuals")
mod1_var_plot
sumCoef[2,4]
summary(mtcars)
mtcars$am
datasetes
datasets(mtcars)
library(datasets)
mtcars
help(mtcars)
summary(model1)
summary(model2)
head(mtcars)
datasets(mtcars)
datasets
library(datasets)
mtcars
lm(mpg ~ am, mtcars)
mtcars
model1 <- lm(mpg ~ am + wt + cyl, mtcars)  ## First model, including cylinders.
model2 <- lm(mpg ~ am + wt, mtcars) ## Second model, without cylinders.
summary(model1)$coefficients
summary(model2)$coefficients
sumCoef <- summary(model1)$coefficients
sumCoef[2,1] + c(1, -1) * 1.96 * (sumCoef[2,2])
sumCoef[2,4]
plot(as.numeric(hatvalues(model1)),
xlab = "Car Model (1-32)",
ylab = "Hat Values",
title = "Hat values mpg ~ am + wt + cyl",
pch = 20)
plot(as.numeric(hatvalues(model1)),
xlab = "Car Model (1-32)",
ylab = "Hat Values",
title("Hat values mpg ~ am + wt + cyl"),
pch = 20)
plot(as.numeric(hatvalues(model1)),
xlab = "Car Model (1-32)",
ylab = "Hat Values",
main = "Hat Values",
pch = 20)
plot(as.numeric(hatvalues(model1)),
xlab = "Car Model (1-32)",
ylab = "Hat Values",
main = "Hat Values mpg ~ am + wt + cyl",
pch = 20)
table(mtcars)
class(mtcars)
head(mtcars)
mtcars
?kable
SumCoef2 <- summary(model2)$coefficients
SumCoef2[2,1] + c(1, -1) * 1.96 * (sumCoef2[2,2])
model1 <- lm(mpg ~ am + wt + cyl, mtcars)  ## First model, including cylinders.
model2 <- lm(mpg ~ am + wt, mtcars) ## Second model, without cylinders.
summary(model1)$coefficients
summary(model2)$coefficients
sumCoef1 <- summary(model1)$coefficients
sumCoef1[2,1] + c(1, -1) * 1.96 * (sumCoef1[2,2])
SumCoef2 <- summary(model2)$coefficients
SumCoef2[2,1] + c(1, -1) * 1.96 * (sumCoef2[2,2])
sumCoef2 <- summary(model2)$coefficients
sumCoef2[2,1] + c(1, -1) * 1.96 * (sumCoef2[2,2])
sumCoef2[2,4] ## Model 2 transmission estimate p-value
library("GGally", lib.loc="~/R/win-library/3.2")
library("knitr", lib.loc="~/R/win-library/3.2")
install.packages(c("chron", "crayon", "curl", "data.table", "devtools", "dplyr", "evaluate", "formatR", "git2r", "gridExtra", "highr", "Hmisc", "httpuv", "httr", "jsonlite", "kernlab", "KernSmooth", "knitr", "lattice", "manipulate", "mime", "plyr", "quantmod", "R6", "Rcpp", "RCurl", "rJava", "rmarkdown", "RMySQL", "rversions", "scales", "stringi", "tidyr", "TTR", "XML", "xml2"))
install.packages(c("chron", "crayon", "curl", "data.table", "devtools",
install.packages("markdown")
?transform
campdata$Name <- transform(campdata, Name = Name /3.67
)
### Make sure dataset is in your working directory before running.
### This script will read in the data, select specific columns,
### impute missing values, create a bunk column, and also create
### a reduced data set with camper outliers removed.
library(dplyr)
library(mice)
campdata <- read.csv("dataset1.csv",
na.strings = c("#N/A", "#DIV/0!", "#VALUE!"),
header = TRUE)
campdata <- campdata[, c(1, 2, 3, 4, 5, 23, 24, 35, 38, 39, 40, 59, 60, 61)]
colnames(campdata) <- c("Week", "Weekday", "Day", "Child_Number",
"Name", "Daily_Total_Points_Earned",
"Daily_Total_Points_Lost", "Total_Std_Attn_Corr",
"Total_Helping", "Total_Sharing",
"Total_Cont_to_Discuss", "Total_Positive_Peer",
"Total_Conduct", "Total_Negative_Verbal")
##  Multiple imputation with mice package.
tempData <- mice(campdata,m=5,maxit=10,meth='pmm',seed=500)
## Camp Data with imputed values.
campdata <- complete(tempData, 1)
## Scramble values for anonymity
campdata$Name <- transform(campdata, Name = Name /3.67)
## Add bunk variable and associated values
campdata$Bunk <- campdata$Name
campdata$Bunk[campdata$Bunk > 15100 & campdata$Bunk < 15200] <- 1
campdata$Bunk[campdata$Bunk > 15200 & campdata$Bunk < 15300] <- 2
campdata$Bunk[campdata$Bunk > 15300 & campdata$Bunk < 15400] <- 3
campdata$Bunk[campdata$Bunk > 15400 & campdata$Bunk < 15500] <- 4
campdata$Bunk[campdata$Bunk > 15500 & campdata$Bunk < 15600] <- 5
campdata$Bunk[campdata$Bunk > 15600 & campdata$Bunk < 15700] <- 6
campdata$Bunk[campdata$Bunk > 15700 & campdata$Bunk < 15800] <- 7
leave_out <- c( 15101,15103, 15104, 15108, 15111, 15112, 15204,15205, 15209, 15210,  15212,
15301, 15307, 15308,15309, 15310, 15403, 15405,15503, 15504,15611,
15701, 15707, 15708, 15709, 15712)
reduced <- filter(campdata, ! Name %in% leave_out)
setwd("c:/users/trading workstation/datasciencecoursera/bendata/dashboard")
### Make sure dataset is in your working directory before running.
### This script will read in the data, select specific columns,
### impute missing values, create a bunk column, and also create
### a reduced data set with camper outliers removed.
library(dplyr)
library(mice)
campdata <- read.csv("dataset1.csv",
na.strings = c("#N/A", "#DIV/0!", "#VALUE!"),
header = TRUE)
campdata <- campdata[, c(1, 2, 3, 4, 5, 23, 24, 35, 38, 39, 40, 59, 60, 61)]
colnames(campdata) <- c("Week", "Weekday", "Day", "Child_Number",
"Name", "Daily_Total_Points_Earned",
"Daily_Total_Points_Lost", "Total_Std_Attn_Corr",
"Total_Helping", "Total_Sharing",
"Total_Cont_to_Discuss", "Total_Positive_Peer",
"Total_Conduct", "Total_Negative_Verbal")
##  Multiple imputation with mice package.
tempData <- mice(campdata,m=5,maxit=10,meth='pmm',seed=500)
## Camp Data with imputed values.
campdata <- complete(tempData, 1)
## Scramble values for anonymity
campdata$Name <- transform(campdata, Name = Name /3.67)
## Add bunk variable and associated values
campdata$Bunk <- campdata$Name
campdata$Bunk[campdata$Bunk > 15100 & campdata$Bunk < 15200] <- 1
campdata$Bunk[campdata$Bunk > 15200 & campdata$Bunk < 15300] <- 2
campdata$Bunk[campdata$Bunk > 15300 & campdata$Bunk < 15400] <- 3
campdata$Bunk[campdata$Bunk > 15400 & campdata$Bunk < 15500] <- 4
campdata$Bunk[campdata$Bunk > 15500 & campdata$Bunk < 15600] <- 5
campdata$Bunk[campdata$Bunk > 15600 & campdata$Bunk < 15700] <- 6
campdata$Bunk[campdata$Bunk > 15700 & campdata$Bunk < 15800] <- 7
leave_out <- c( 15101,15103, 15104, 15108, 15111, 15112, 15204,15205, 15209, 15210,  15212,
15301, 15307, 15308,15309, 15310, 15403, 15405,15503, 15504,15611,
15701, 15707, 15708, 15709, 15712)
reduced <- filter(campdata, ! Name %in% leave_out)
campdata$Daily_Total_Points_Earned <- transform(campdata,
Daily_Total_Points_Earned = Daily_Total_Points_Earned /3.67)
## Add bunk variable and associated values
campdata$Bunk <- campdata$Name
campdata$Bunk[campdata$Bunk > 15100 & campdata$Bunk < 15200] <- 1
campdata$Bunk[campdata$Bunk > 15200 & campdata$Bunk < 15300] <- 2
campdata$Bunk[campdata$Bunk > 15300 & campdata$Bunk < 15400] <- 3
campdata$Bunk[campdata$Bunk > 15400 & campdata$Bunk < 15500] <- 4
campdata$Bunk[campdata$Bunk > 15500 & campdata$Bunk < 15600] <- 5
campdata$Bunk[campdata$Bunk > 15600 & campdata$Bunk < 15700] <- 6
campdata$Bunk[campdata$Bunk > 15700 & campdata$Bunk < 15800] <- 7
leave_out <- c( 15101,15103, 15104, 15108, 15111, 15112, 15204,15205, 15209, 15210,  15212,
15301, 15307, 15308,15309, 15310, 15403, 15405,15503, 15504,15611,
15701, 15707, 15708, 15709, 15712)
reduced <- filter(campdata, ! Name %in% leave_out)
### Make sure dataset is in your working directory before running.
### This script will read in the data, select specific columns,
### impute missing values, create a bunk column, and also create
### a reduced data set with camper outliers removed.
library(dplyr)
library(mice)
campdata <- read.csv("dataset1.csv",
na.strings = c("#N/A", "#DIV/0!", "#VALUE!"),
header = TRUE)
campdata <- campdata[, c(1, 2, 3, 4, 5, 23, 24, 35, 38, 39, 40, 59, 60, 61)]
colnames(campdata) <- c("Week", "Weekday", "Day", "Child_Number",
"Name", "Daily_Total_Points_Earned",
"Daily_Total_Points_Lost", "Total_Std_Attn_Corr",
"Total_Helping", "Total_Sharing",
"Total_Cont_to_Discuss", "Total_Positive_Peer",
"Total_Conduct", "Total_Negative_Verbal")
##  Multiple imputation with mice package.
tempData <- mice(campdata,m=5,maxit=10,meth='pmm',seed=500)
## Camp Data with imputed values.
campdata <- complete(tempData, 1)
## Scramble values for anonymity
campdata$Daily_Total_Points_Earned <- transform(campdata,
Daily_Total_Points_Earned = Daily_Total_Points_Earned /3.67)
## Add bunk variable and associated values
campdata$Bunk <- campdata$Name
campdata$Bunk[campdata$Bunk > 15100 & campdata$Bunk < 15200] <- 1
campdata$Bunk[campdata$Bunk > 15200 & campdata$Bunk < 15300] <- 2
campdata$Bunk[campdata$Bunk > 15300 & campdata$Bunk < 15400] <- 3
campdata$Bunk[campdata$Bunk > 15400 & campdata$Bunk < 15500] <- 4
campdata$Bunk[campdata$Bunk > 15500 & campdata$Bunk < 15600] <- 5
campdata$Bunk[campdata$Bunk > 15600 & campdata$Bunk < 15700] <- 6
campdata$Bunk[campdata$Bunk > 15700 & campdata$Bunk < 15800] <- 7
leave_out <- c( 15101,15103, 15104, 15108, 15111, 15112, 15204,15205, 15209, 15210,  15212,
15301, 15307, 15308,15309, 15310, 15403, 15405,15503, 15504,15611,
15701, 15707, 15708, 15709, 15712)
reduced <- filter(campdata, ! Name %in% leave_out)
campdata$Daily_Total_Points_Earned
head(campdata$Daily_Total_Points_Earned)
View(campdata)
campdata <- campdata[sample(nrow(campdata)),]
View(campdata)
source('C:/Users/Trading Workstation/datasciencecoursera/BenData/Dashboard/read_clean_campdata.R')
shiny::runApp('C:/Users/Trading Workstation/datasciencecoursera/BenData/Dashboard')
shiny::runApp('C:/Users/Trading Workstation/datasciencecoursera/BenData/Dashboard')
### Make sure dataset is in your working directory before running.
### This script will read in the data, select specific columns,
### impute missing values, create a bunk column, and also create
### a reduced data set with camper outliers removed.
library(dplyr)
library(mice)
campdata <- read.csv("dataset1.csv",
na.strings = c("#N/A", "#DIV/0!", "#VALUE!"),
header = TRUE)
campdata <- campdata[, c(1, 2, 3, 4, 5, 23, 24, 35, 38, 39, 40, 59, 60, 61)]
colnames(campdata) <- c("Week", "Weekday", "Day", "Child_Number",
"Name", "Daily_Total_Points_Earned",
"Daily_Total_Points_Lost", "Total_Std_Attn_Corr",
"Total_Helping", "Total_Sharing",
"Total_Cont_to_Discuss", "Total_Positive_Peer",
"Total_Conduct", "Total_Negative_Verbal")
##  Multiple imputation with mice package.
tempData <- mice(campdata,m=5,maxit=10,meth='pmm',seed=500)
## Camp Data with imputed values.
campdata <- complete(tempData, 1)
## Scramble values for anonymity
campdata <- campdata[sample(nrow(campdata)),]
## Add bunk variable and associated values
campdata$Bunk <- campdata$Name
campdata$Bunk[campdata$Bunk > 15100 & campdata$Bunk < 15200] <- 1
campdata$Bunk[campdata$Bunk > 15200 & campdata$Bunk < 15300] <- 2
campdata$Bunk[campdata$Bunk > 15300 & campdata$Bunk < 15400] <- 3
campdata$Bunk[campdata$Bunk > 15400 & campdata$Bunk < 15500] <- 4
campdata$Bunk[campdata$Bunk > 15500 & campdata$Bunk < 15600] <- 5
campdata$Bunk[campdata$Bunk > 15600 & campdata$Bunk < 15700] <- 6
campdata$Bunk[campdata$Bunk > 15700 & campdata$Bunk < 15800] <- 7
leave_out <- c( 15101,15103, 15104, 15108, 15111, 15112, 15204,15205, 15209, 15210,  15212,
15301, 15307, 15308,15309, 15310, 15403, 15405,15503, 15504,15611,
15701, 15707, 15708, 15709, 15712)
reduced <- filter(campdata, ! Name %in% leave_out)
colnames(reduced)
colnames(campdata)
shiny::runApp('C:/Users/Trading Workstation/datasciencecoursera/BenData/Dashboard')
shiny::runApp('C:/Users/Trading Workstation/datasciencecoursera/BenData/Dashboard')
source('C:/Users/Trading Workstation/datasciencecoursera/BenData/Dashboard/read_clean_campdata.R', echo=TRUE)
shiny::runApp('C:/Users/Trading Workstation/datasciencecoursera/BenData/Dashboard')
source('C:/Users/Trading Workstation/datasciencecoursera/BenData/Dashboard/read_clean_campdata.R')
shiny::runApp('C:/Users/Trading Workstation/datasciencecoursera/BenData/Dashboard')
shiny::runApp('C:/Users/Trading Workstation/datasciencecoursera/BenData/Dashboard')
shiny::runApp('C:/Users/Trading Workstation/datasciencecoursera/BenData/Dashboard')
source('C:/Users/Trading Workstation/datasciencecoursera/BenData/Dashboard/read_clean_campdata.R')
shiny::runApp('C:/Users/Trading Workstation/datasciencecoursera/BenData/Dashboard')
shiny::runApp('C:/Users/Trading Workstation/datasciencecoursera/BenData/Dashboard')
shiny::runApp('C:/Users/Trading Workstation/datasciencecoursera/BenData/Dashboard')
shiny::runApp('C:/Users/Trading Workstation/datasciencecoursera/BenData/Dashboard')
shinyapps::deployApp('c:/users/trading workstation/datasciencecoursera/bendata/dashboard')
shiny::runApp('C:/Users/Trading Workstation/datasciencecoursera/BenData/Dashboard')
